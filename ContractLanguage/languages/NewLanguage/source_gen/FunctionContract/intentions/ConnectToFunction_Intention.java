package FunctionContract.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import FunctionContract.behavior.FunctionContract_Behavior;
import jetbrains.mps.intentions.IntentionDescriptor;

public class ConnectToFunction_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public ConnectToFunction_Intention() {
  }
  public String getConcept() {
    return "FunctionContract.structure.FunctionContract";
  }
  public String getPresentation() {
    return "ConnectToFunction";
  }
  public String getPersistentStateKey() {
    return "FunctionContract.intentions.ConnectToFunction_Intention";
  }
  public String getLanguageFqName() {
    return "FunctionContract";
  }
  public IntentionType getType() {
    return IntentionType.NORMAL;
  }
  public boolean isAvailableInChildNodes() {
    return false;
  }
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }
  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:7333a1b7-8a8d-4366-b9c4-2eba12a838c1(FunctionContract.intentions)", "3598327450488808443");
  }
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new ConnectToFunction_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }
  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Connect to Function";
    }
    public void execute(final SNode node, final EditorContext editorContext) {
      FunctionContract_Behavior.call_addArgs_2742180936282602292(node);
    }
    public IntentionDescriptor getDescriptor() {
      return ConnectToFunction_Intention.this;
    }
  }
}
