package FunctionContract.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.SNodePointer;

public class ReturnValue_Constraints extends BaseConstraintsDescriptor {
  public ReturnValue_Constraints() {
    super(MetaIdFactory.conceptId(0x902ada2bdddc4d40L, 0x9436e13ab6ba878dL, 0x2fe98c9a57957044L));
  }
  @Override
  public boolean hasOwnCanBeChildMethod() {
    return true;
  }
  @Override
  public boolean canBeChild(@Nullable SNode node, SNode parentNode, SNode link, SNode childConcept, final IOperationContext operationContext, @Nullable final CheckingNodeContext checkingNodeContext) {
    boolean result = static_canBeAChild(node, parentNode, link, childConcept, operationContext);

    if (!(result) && checkingNodeContext != null) {
      checkingNodeContext.setBreakingNode(canBeChildBreakingPoint);
    }

    return result;
  }
  public static boolean static_canBeAChild(SNode node, SNode parentNode, SNode link, SNode childConcept, final IOperationContext operationContext) {
    return SNodeOperations.isInstanceOf(parentNode, MetaAdapterFactory.getConcept(0x902ada2bdddc4d40L, 0x9436e13ab6ba878dL, 0x5d0fbbc0aa2dc9f2L, "FunctionContract.structure.Postconditions"));
  }
  private static SNodePointer canBeChildBreakingPoint = new SNodePointer("r:35009ee1-40f3-4492-87c9-5ed84e5b7c7a(FunctionContract.constraints)", "7519962224658965104");
}
