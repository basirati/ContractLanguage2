package FunctionContract.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SReferenceLinkId;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseReferenceScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;

public class ArgReference_Constraints extends BaseConstraintsDescriptor {
  public ArgReference_Constraints() {
    super(MetaIdFactory.conceptId(0x902ada2bdddc4d40L, 0x9436e13ab6ba878dL, 0x7633a1580da963bcL));
  }
  @Override
  protected Map<SReferenceLinkId, ReferenceConstraintsDescriptor> getNotDefaultSReferenceLinks() {
    Map<SReferenceLinkId, ReferenceConstraintsDescriptor> references = new HashMap<SReferenceLinkId, ReferenceConstraintsDescriptor>();
    references.put(MetaIdFactory.refId(0x902ada2bdddc4d40L, 0x9436e13ab6ba878dL, 0x7633a1580da963bcL, 0x7633a1580da980b5L), new BaseReferenceConstraintsDescriptor(MetaIdFactory.refId(0x902ada2bdddc4d40L, 0x9436e13ab6ba878dL, 0x7633a1580da963bcL, 0x7633a1580da980b5L), this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseReferenceScopeProvider() {
          @Override
          public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            return SLinkOperations.getChildren(SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(_context.getEnclosingNode(), MetaAdapterFactory.getConcept(0x902ada2bdddc4d40L, 0x9436e13ab6ba878dL, 0x5d0fbbc0aa247ceaL, "FunctionContract.structure.FunctionContract"), false, false), MetaAdapterFactory.getContainmentLink(0x902ada2bdddc4d40L, 0x9436e13ab6ba878dL, 0x5d0fbbc0aa247ceaL, 0x5d0fbbc0aa2bf3a8L, "function")), MetaAdapterFactory.getReferenceLink(0x6d11763d483d4b2bL, 0x8efc09336c1b0001L, 0x76ad8d576f018e43L, 0x76ad8d576f018e45L, "function")), MetaAdapterFactory.getContainmentLink(0x6d11763d483d4b2bL, 0x8efc09336c1b0001L, 0x707ac195dd5d51f2L, 0x4f39f90935e92f45L, "arguments"));
          }
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_wc2wxy_a0a1a0a0a1a0b0a1a1;
          }
        };
      }
    });
    return references;
  }
  private static SNodePointer breakingNode_wc2wxy_a0a1a0a0a1a0b0a1a1 = new SNodePointer("r:35009ee1-40f3-4492-87c9-5ed84e5b7c7a(FunctionContract.constraints)", "8517328719846198355");
}
