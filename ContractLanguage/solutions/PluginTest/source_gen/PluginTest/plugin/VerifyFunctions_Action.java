package PluginTest.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.apache.log4j.Level;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import com.mbeddr.analyses.cbmc.core.rt.utils.CoreConfigCheckingUtils;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import com.mbeddr.analyses.cbmc.rt.run.CBMCAnalysisConfig;
import jetbrains.mps.smodel.ModelAccess;
import com.mbeddr.analyses.cbmc.rt.run.VerificationConfigurationUtils;
import com.mbeddr.analyses.cbmc.pluginSolution.plugin.CProverToolAdapter;
import com.intellij.openapi.project.Project;
import com.mbeddr.analyses.cbmc.rt.run.CProverAnalysesUtils;
import org.jetbrains.mps.openapi.model.SModel;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class VerifyFunctions_Action extends BaseAction {
  private static final Icon ICON = null;
  public VerifyFunctions_Action() {
    super("Verify Functions", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("User's action doUpdate method failed. Action:" + "VerifyFunctions", t);
      }
      this.disable(event.getPresentation());
    }
  }
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(CommonDataKeys.PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    {
      SNode node = event.getData(MPSCommonDataKeys.NODE);
      if (node != null) {
        if (!(SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0x6d11763d483d4b2bL, 0x8efc09336c1b0001L, 0x595522006a5b97e1L, "com.mbeddr.core.modules.structure.Function")))) {
          node = null;
        }
      }
      MapSequence.fromMap(_params).put("funct", node);
    }
    if (MapSequence.fromMap(_params).get("funct") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("model", event.getData(MPSCommonDataKeys.CONTEXT_MODEL));
    if (MapSequence.fromMap(_params).get("model") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("ctx", event.getData(MPSCommonDataKeys.OPERATION_CONTEXT));
    if (MapSequence.fromMap(_params).get("ctx") == null) {
      return false;
    }
    return true;
  }
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {

      SPropertyOperations.set(((SNode) MapSequence.fromMap(_params).get("funct")), MetaAdapterFactory.getProperty(0x6d11763d483d4b2bL, 0x8efc09336c1b0001L, 0x595522006a5b934fL, 0x124a1a47a69807f0L, "exported"), "" + (true));

      if (!(CoreConfigCheckingUtils.performConfigurationChecks(((SNode) MapSequence.fromMap(_params).get("funct"))))) {
        return;
      }

      if ((AttributeOperations.getAttribute(((SNode) MapSequence.fromMap(_params).get("funct")), new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0x902ada2bdddc4d40L, 0x9436e13ab6ba878dL, 0x740a4bd1e9846222L, "FunctionContract.structure.VerifyFunctionAttribute"))) == null)) {
        AttributeOperations.createAndSetAttrbiute(((SNode) MapSequence.fromMap(_params).get("funct")), new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0x902ada2bdddc4d40L, 0x9436e13ab6ba878dL, 0x740a4bd1e9846222L, "FunctionContract.structure.VerifyFunctionAttribute")), "FunctionContract.structure.VerifyFunctionAttribute");
      }

      final CBMCAnalysisConfig conf = new CBMCAnalysisConfig();
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          try {
            conf.setFunctionName(VerificationConfigurationUtils.computeEntryFunctionName(((SNode) MapSequence.fromMap(_params).get("funct"))));
          } catch (Exception e) {
            e.printStackTrace();
          }
        }
      });
      conf.setEntryPoint(((SNode) MapSequence.fromMap(_params).get("funct")));
      conf.setAnalyzedNode(((SNode) MapSequence.fromMap(_params).get("funct")));


      CProverToolAdapter toolAdapter = new CProverToolAdapter(((Project) MapSequence.fromMap(_params).get("project")));
      VerifyingFunctionAnalyzerFactory factory = new VerifyingFunctionAnalyzerFactory();
      CProverAnalysesUtils.performAnalysis(((Project) MapSequence.fromMap(_params).get("project")), ((SModel) MapSequence.fromMap(_params).get("model")), factory, conf, toolAdapter);

    } catch (Throwable t) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("User's action execute method failed. Action:" + "VerifyFunctions", t);
      }
    }
  }
  protected static Logger LOG = LogManager.getLogger(VerifyFunctions_Action.class);
}
