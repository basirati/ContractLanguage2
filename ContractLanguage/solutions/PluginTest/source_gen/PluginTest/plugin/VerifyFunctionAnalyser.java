package PluginTest.plugin;

/*Generated by MPS */

import com.mbeddr.analyses.cbmc.rt.analyses.claims.ClaimsAnalyzer;
import com.mbeddr.analyses.cbmc.core.rt.analyses.asserts.CBMCAssertResult;
import com.mbeddr.analyses.cbmc.rt.run.CBMCAnalysisConfig;
import com.mbeddr.analyses.utils.analyzer.MPSToolAdapter;
import com.intellij.openapi.progress.ProgressIndicator;
import com.mbeddr.analyses.cbmc.rt.counterexample.raw.CBMCRawResult;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import com.mbeddr.analyses.cbmc.rt.counterexample.raw.CBMCRawClaim;

public class VerifyFunctionAnalyser extends ClaimsAnalyzer<CBMCAssertResult> {

  public VerifyFunctionAnalyser(CBMCAnalysisConfig config, MPSToolAdapter tool, ProgressIndicator pi) {
    super(config, tool, "assertion", pi);
  }


  @Override
  protected CBMCAssertResult liftResult(final CBMCRawResult rawResult, final SNode analyzedNode, final String userFriendlyMessage) {
    if (userFriendlyMessage.endsWith(NO_VC_FOUND_MESSAGE)) {
      return VerifyFunctionResultBuilder.buildNoVerifyFunctionFoundResult(rawResult, analyzedNode);
    }

    final Wrappers._T<CBMCAssertResult> res = new Wrappers._T<CBMCAssertResult>(null);
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        try {
          res.value = VerifyFunctionResultBuilder.buildVerifyFunctionResult(rawResult, analyzedNode, userFriendlyMessage);
        } catch (Exception e) {
          e.printStackTrace();
        }
      }
    });
    return res.value;
  }

  @Override
  protected List<String> computeArguments(final CBMCAnalysisConfig config) {
    final List<String> args = ListSequence.fromList(new LinkedList<String>());
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        try {
          ListSequence.fromList(args).addElement(collectAdditionalPaths());
          ListSequence.fromList(args).addSequence(ListSequence.fromList(computeCommonArguments(config)));
          addFunctionArgument(args, config);
        } catch (Exception e) {
          e.printStackTrace();
        }
      }
    });
    return args;
  }
  @Override
  protected List<CBMCRawClaim> filterClaims(List<CBMCRawClaim> claims) {
    return claims;
  }
  @Override
  protected String getAnalysisUserFriendlyName() {
    return "assertion";
  }
}
